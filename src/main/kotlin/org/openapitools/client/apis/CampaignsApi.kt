/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import okhttp3.HttpUrl
import okhttp3.OkHttpClient
import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.models.Campaign
import org.openapitools.client.models.CampaignModify
import org.openapitools.client.models.Campaigns
import org.openapitools.client.models.Channel
import org.openapitools.client.models.ChannelModify
import org.openapitools.client.models.Channels
import java.io.IOException

class CampaignsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api-ssl.bitly.com/v4")
        }
    }

    /**
     * Create Campaign
     * Creates a new campaign.
     * @param campaignModify
     * @return Campaign
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createCampaign(campaignModify: CampaignModify): Campaign {
        val localVarResponse = createCampaignWithHttpInfo(campaignModify = campaignModify)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Campaign
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Campaign
     * Creates a new campaign.
     * @param campaignModify
     * @return ApiResponse<Campaign?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createCampaignWithHttpInfo(campaignModify: CampaignModify): ApiResponse<Campaign?> {
        val localVariableConfig = createCampaignRequestConfig(campaignModify = campaignModify)

        return request<CampaignModify, Campaign>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createCampaign
     *
     * @param campaignModify
     * @return RequestConfig
     */
    fun createCampaignRequestConfig(campaignModify: CampaignModify): RequestConfig<CampaignModify> {
        val localVariableBody = campaignModify
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/campaigns",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Channel
     * Creates a new channel.
     * @param channelModify
     * @return Channel
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createChannel(channelModify: ChannelModify): Channel {
        val localVarResponse = createChannelWithHttpInfo(channelModify = channelModify)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Channel
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Channel
     * Creates a new channel.
     * @param channelModify
     * @return ApiResponse<Channel?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createChannelWithHttpInfo(channelModify: ChannelModify): ApiResponse<Channel?> {
        val localVariableConfig = createChannelRequestConfig(channelModify = channelModify)

        return request<ChannelModify, Channel>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createChannel
     *
     * @param channelModify
     * @return RequestConfig
     */
    fun createChannelRequestConfig(channelModify: ChannelModify): RequestConfig<ChannelModify> {
        val localVariableBody = channelModify
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/channels",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve a Campaign
     * Returns details for a campaign.
     * @param campaignGuid A GUID for a Bitly campaign
     * @return Campaign
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaign(campaignGuid: kotlin.String): Campaign {
        val localVarResponse = getCampaignWithHttpInfo(campaignGuid = campaignGuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Campaign
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve a Campaign
     * Returns details for a campaign.
     * @param campaignGuid A GUID for a Bitly campaign
     * @return ApiResponse<Campaign?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignWithHttpInfo(campaignGuid: kotlin.String): ApiResponse<Campaign?> {
        val localVariableConfig = getCampaignRequestConfig(campaignGuid = campaignGuid)

        return request<Unit, Campaign>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaign
     *
     * @param campaignGuid A GUID for a Bitly campaign
     * @return RequestConfig
     */
    fun getCampaignRequestConfig(campaignGuid: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/campaigns/{campaign_guid}".replace("{" + "campaign_guid" + "}", encodeURIComponent(campaignGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Campaigns
     * Returns the campaigns for the current authenticated user.
     * @param groupGuid A GUID for a Bitly group (optional)
     * @return Campaigns
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCampaigns(groupGuid: kotlin.String? = null): Campaigns {
        val localVarResponse = getCampaignsWithHttpInfo(groupGuid = groupGuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Campaigns
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Campaigns
     * Returns the campaigns for the current authenticated user.
     * @param groupGuid A GUID for a Bitly group (optional)
     * @return ApiResponse<Campaigns?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCampaignsWithHttpInfo(groupGuid: kotlin.String?): ApiResponse<Campaigns?> {
        val localVariableConfig = getCampaignsRequestConfig(groupGuid = groupGuid)

        return request<Unit, Campaigns>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCampaigns
     *
     * @param groupGuid A GUID for a Bitly group (optional)
     * @return RequestConfig
     */
    fun getCampaignsRequestConfig(groupGuid: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (groupGuid != null) {
                    put("group_guid", listOf(groupGuid.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/campaigns",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get a Channel
     * Returns a channel&#39;s details.
     * @param channelGuid A GUID for a Bitly Channel
     * @return Channel
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getChannel(channelGuid: kotlin.String): Channel {
        val localVarResponse = getChannelWithHttpInfo(channelGuid = channelGuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Channel
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get a Channel
     * Returns a channel&#39;s details.
     * @param channelGuid A GUID for a Bitly Channel
     * @return ApiResponse<Channel?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getChannelWithHttpInfo(channelGuid: kotlin.String): ApiResponse<Channel?> {
        val localVariableConfig = getChannelRequestConfig(channelGuid = channelGuid)

        return request<Unit, Channel>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getChannel
     *
     * @param channelGuid A GUID for a Bitly Channel
     * @return RequestConfig
     */
    fun getChannelRequestConfig(channelGuid: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/channels/{channel_guid}".replace("{" + "channel_guid" + "}", encodeURIComponent(channelGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Channels
     * Returns the channels available to a user.
     * @param groupGuid A GUID for a Bitly group (optional)
     * @param campaignGuid A GUID for a Bitly campaign (optional)
     * @return Channels
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getChannels(groupGuid: kotlin.String? = null, campaignGuid: kotlin.String? = null): Channels {
        val localVarResponse = getChannelsWithHttpInfo(groupGuid = groupGuid, campaignGuid = campaignGuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Channels
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Channels
     * Returns the channels available to a user.
     * @param groupGuid A GUID for a Bitly group (optional)
     * @param campaignGuid A GUID for a Bitly campaign (optional)
     * @return ApiResponse<Channels?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getChannelsWithHttpInfo(groupGuid: kotlin.String?, campaignGuid: kotlin.String?): ApiResponse<Channels?> {
        val localVariableConfig = getChannelsRequestConfig(groupGuid = groupGuid, campaignGuid = campaignGuid)

        return request<Unit, Channels>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getChannels
     *
     * @param groupGuid A GUID for a Bitly group (optional)
     * @param campaignGuid A GUID for a Bitly campaign (optional)
     * @return RequestConfig
     */
    fun getChannelsRequestConfig(groupGuid: kotlin.String?, campaignGuid: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (groupGuid != null) {
                    put("group_guid", listOf(groupGuid.toString()))
                }
                if (campaignGuid != null) {
                    put("campaign_guid", listOf(campaignGuid.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/channels",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update Campaign
     * Updates a campaign&#39;s details.
     * @param campaignGuid A GUID for a Bitly campaign
     * @param campaignModify
     * @return Campaign
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateCampaign(campaignGuid: kotlin.String, campaignModify: CampaignModify): Campaign {
        val localVarResponse = updateCampaignWithHttpInfo(campaignGuid = campaignGuid, campaignModify = campaignModify)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Campaign
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Campaign
     * Updates a campaign&#39;s details.
     * @param campaignGuid A GUID for a Bitly campaign
     * @param campaignModify
     * @return ApiResponse<Campaign?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateCampaignWithHttpInfo(campaignGuid: kotlin.String, campaignModify: CampaignModify): ApiResponse<Campaign?> {
        val localVariableConfig = updateCampaignRequestConfig(campaignGuid = campaignGuid, campaignModify = campaignModify)

        return request<CampaignModify, Campaign>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateCampaign
     *
     * @param campaignGuid A GUID for a Bitly campaign
     * @param campaignModify
     * @return RequestConfig
     */
    fun updateCampaignRequestConfig(campaignGuid: kotlin.String, campaignModify: CampaignModify): RequestConfig<CampaignModify> {
        val localVariableBody = campaignModify
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/campaigns/{campaign_guid}".replace("{" + "campaign_guid" + "}", encodeURIComponent(campaignGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update a Channel
     * Updates an existing channel.
     * @param channelGuid A GUID for a Bitly Channel
     * @param channelModify
     * @return Channel
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateChannel(channelGuid: kotlin.String, channelModify: ChannelModify): Channel {
        val localVarResponse = updateChannelWithHttpInfo(channelGuid = channelGuid, channelModify = channelModify)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Channel
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update a Channel
     * Updates an existing channel.
     * @param channelGuid A GUID for a Bitly Channel
     * @param channelModify
     * @return ApiResponse<Channel?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateChannelWithHttpInfo(channelGuid: kotlin.String, channelModify: ChannelModify): ApiResponse<Channel?> {
        val localVariableConfig = updateChannelRequestConfig(channelGuid = channelGuid, channelModify = channelModify)

        return request<ChannelModify, Channel>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateChannel
     *
     * @param channelGuid A GUID for a Bitly Channel
     * @param channelModify
     * @return RequestConfig
     */
    fun updateChannelRequestConfig(channelGuid: kotlin.String, channelModify: ChannelModify): RequestConfig<ChannelModify> {
        val localVariableBody = channelModify
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/channels/{channel_guid}".replace("{" + "channel_guid" + "}", encodeURIComponent(channelGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
