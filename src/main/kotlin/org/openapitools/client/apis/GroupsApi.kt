/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import okhttp3.HttpUrl
import okhttp3.OkHttpClient
import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.models.CityMetrics
import org.openapitools.client.models.ClickMetrics
import org.openapitools.client.models.DeviceMetrics
import org.openapitools.client.models.Group
import org.openapitools.client.models.GroupClicks
import org.openapitools.client.models.GroupPreferences
import org.openapitools.client.models.GroupUpdate
import org.openapitools.client.models.Groups
import org.openapitools.client.models.Metrics
import org.openapitools.client.models.QRLogoImagesResponse
import org.openapitools.client.models.Tags
import org.openapitools.client.models.TimeUnit
import java.io.IOException

class GroupsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api-ssl.bitly.com/v4")
        }
    }

    /**
     * Retrieve a Group
     * Returns details for a group.
     * @param groupGuid A GUID for a Bitly group
     * @return Group
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroup(groupGuid: kotlin.String): Group {
        val localVarResponse = getGroupWithHttpInfo(groupGuid = groupGuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Group
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve a Group
     * Returns details for a group.
     * @param groupGuid A GUID for a Bitly group
     * @return ApiResponse<Group?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupWithHttpInfo(groupGuid: kotlin.String): ApiResponse<Group?> {
        val localVariableConfig = getGroupRequestConfig(groupGuid = groupGuid)

        return request<Unit, Group>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroup
     *
     * @param groupGuid A GUID for a Bitly group
     * @return RequestConfig
     */
    fun getGroupRequestConfig(groupGuid: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/groups/{group_guid}".replace("{" + "group_guid" + "}", encodeURIComponent(groupGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get clicks by group
     * get number of clicks on bitlinks in a group
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return GroupClicks
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroupClicks(groupGuid: kotlin.String, unit: TimeUnit = TimeUnit.day, units: kotlin.Int = -1, unitReference: kotlin.String? = null): GroupClicks {
        val localVarResponse = getGroupClicksWithHttpInfo(groupGuid = groupGuid, unit = unit, units = units, unitReference = unitReference)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GroupClicks
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get clicks by group
     * get number of clicks on bitlinks in a group
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return ApiResponse<GroupClicks?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupClicksWithHttpInfo(groupGuid: kotlin.String, unit: TimeUnit, units: kotlin.Int, unitReference: kotlin.String?): ApiResponse<GroupClicks?> {
        val localVariableConfig = getGroupClicksRequestConfig(groupGuid = groupGuid, unit = unit, units = units, unitReference = unitReference)

        return request<Unit, GroupClicks>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroupClicks
     *
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return RequestConfig
     */
    fun getGroupClicksRequestConfig(groupGuid: kotlin.String, unit: TimeUnit, units: kotlin.Int, unitReference: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("unit", listOf(unit.toString()))
                put("units", listOf(units.toString()))
                if (unitReference != null) {
                    put("unit_reference", listOf(unitReference.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/groups/{group_guid}/clicks".replace("{" + "group_guid" + "}", encodeURIComponent(groupGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Click Metrics for a Group by City
     * Returns the geographic origins of click traffic by city for the specified group.
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return CityMetrics
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroupMetricsByCities(groupGuid: kotlin.String, unit: TimeUnit = TimeUnit.day, units: kotlin.Int = -1, size: kotlin.Int? = 50, unitReference: kotlin.String? = null): CityMetrics {
        val localVarResponse = getGroupMetricsByCitiesWithHttpInfo(groupGuid = groupGuid, unit = unit, units = units, size = size, unitReference = unitReference)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CityMetrics
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Click Metrics for a Group by City
     * Returns the geographic origins of click traffic by city for the specified group.
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return ApiResponse<CityMetrics?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupMetricsByCitiesWithHttpInfo(groupGuid: kotlin.String, unit: TimeUnit, units: kotlin.Int, size: kotlin.Int?, unitReference: kotlin.String?): ApiResponse<CityMetrics?> {
        val localVariableConfig = getGroupMetricsByCitiesRequestConfig(groupGuid = groupGuid, unit = unit, units = units, size = size, unitReference = unitReference)

        return request<Unit, CityMetrics>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroupMetricsByCities
     *
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return RequestConfig
     */
    fun getGroupMetricsByCitiesRequestConfig(groupGuid: kotlin.String, unit: TimeUnit, units: kotlin.Int, size: kotlin.Int?, unitReference: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("unit", listOf(unit.toString()))
                put("units", listOf(units.toString()))
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (unitReference != null) {
                    put("unit_reference", listOf(unitReference.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/groups/{group_guid}/cities".replace("{" + "group_guid" + "}", encodeURIComponent(groupGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Click Metrics for a Group by Country
     * Returns the geographic origins of click traffic by country for the specified group.
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return ClickMetrics
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroupMetricsByCountries(groupGuid: kotlin.String, unit: TimeUnit = TimeUnit.day, units: kotlin.Int = -1, size: kotlin.Int? = 50, unitReference: kotlin.String? = null): ClickMetrics {
        val localVarResponse = getGroupMetricsByCountriesWithHttpInfo(groupGuid = groupGuid, unit = unit, units = units, size = size, unitReference = unitReference)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ClickMetrics
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Click Metrics for a Group by Country
     * Returns the geographic origins of click traffic by country for the specified group.
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return ApiResponse<ClickMetrics?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupMetricsByCountriesWithHttpInfo(groupGuid: kotlin.String, unit: TimeUnit, units: kotlin.Int, size: kotlin.Int?, unitReference: kotlin.String?): ApiResponse<ClickMetrics?> {
        val localVariableConfig = getGroupMetricsByCountriesRequestConfig(groupGuid = groupGuid, unit = unit, units = units, size = size, unitReference = unitReference)

        return request<Unit, ClickMetrics>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroupMetricsByCountries
     *
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return RequestConfig
     */
    fun getGroupMetricsByCountriesRequestConfig(groupGuid: kotlin.String, unit: TimeUnit, units: kotlin.Int, size: kotlin.Int?, unitReference: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("unit", listOf(unit.toString()))
                put("units", listOf(units.toString()))
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (unitReference != null) {
                    put("unit_reference", listOf(unitReference.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/groups/{group_guid}/countries".replace("{" + "group_guid" + "}", encodeURIComponent(groupGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Click Metrics for a Group by Device Type
     * Returns the device types generating click traffic to the specified group&#39;s links.
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return DeviceMetrics
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroupMetricsByDevices(groupGuid: kotlin.String, unit: TimeUnit = TimeUnit.day, units: kotlin.Int = -1, size: kotlin.Int? = 50, unitReference: kotlin.String? = null): DeviceMetrics {
        val localVarResponse = getGroupMetricsByDevicesWithHttpInfo(groupGuid = groupGuid, unit = unit, units = units, size = size, unitReference = unitReference)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeviceMetrics
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Click Metrics for a Group by Device Type
     * Returns the device types generating click traffic to the specified group&#39;s links.
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return ApiResponse<DeviceMetrics?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupMetricsByDevicesWithHttpInfo(groupGuid: kotlin.String, unit: TimeUnit, units: kotlin.Int, size: kotlin.Int?, unitReference: kotlin.String?): ApiResponse<DeviceMetrics?> {
        val localVariableConfig = getGroupMetricsByDevicesRequestConfig(groupGuid = groupGuid, unit = unit, units = units, size = size, unitReference = unitReference)

        return request<Unit, DeviceMetrics>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroupMetricsByDevices
     *
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param size The quantity of items to be be returned (optional, default to 50)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return RequestConfig
     */
    fun getGroupMetricsByDevicesRequestConfig(groupGuid: kotlin.String, unit: TimeUnit, units: kotlin.Int, size: kotlin.Int?, unitReference: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("unit", listOf(unit.toString()))
                put("units", listOf(units.toString()))
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (unitReference != null) {
                    put("unit_reference", listOf(unitReference.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/groups/{group_guid}/devices".replace("{" + "group_guid" + "}", encodeURIComponent(groupGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Click Metrics for a Group by Referring Networks
     * Returns metrics by referring networks for the specified group&#39;s links.
     * @param groupGuid A GUID for a Bitly group
     * @return ClickMetrics
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroupMetricsByReferringNetworks(groupGuid: kotlin.String): ClickMetrics {
        val localVarResponse = getGroupMetricsByReferringNetworksWithHttpInfo(groupGuid = groupGuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ClickMetrics
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Click Metrics for a Group by Referring Networks
     * Returns metrics by referring networks for the specified group&#39;s links.
     * @param groupGuid A GUID for a Bitly group
     * @return ApiResponse<ClickMetrics?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupMetricsByReferringNetworksWithHttpInfo(groupGuid: kotlin.String): ApiResponse<ClickMetrics?> {
        val localVariableConfig = getGroupMetricsByReferringNetworksRequestConfig(groupGuid = groupGuid)

        return request<Unit, ClickMetrics>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroupMetricsByReferringNetworks
     *
     * @param groupGuid A GUID for a Bitly group
     * @return RequestConfig
     */
    fun getGroupMetricsByReferringNetworksRequestConfig(groupGuid: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/groups/{group_guid}/referring_networks".replace("{" + "group_guid" + "}", encodeURIComponent(groupGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Group Preferences
     * Returns preferences for the specified group.
     * @param groupGuid A GUID for a Bitly group
     * @return GroupPreferences
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroupPreferences(groupGuid: kotlin.String): GroupPreferences {
        val localVarResponse = getGroupPreferencesWithHttpInfo(groupGuid = groupGuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GroupPreferences
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Group Preferences
     * Returns preferences for the specified group.
     * @param groupGuid A GUID for a Bitly group
     * @return ApiResponse<GroupPreferences?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupPreferencesWithHttpInfo(groupGuid: kotlin.String): ApiResponse<GroupPreferences?> {
        val localVariableConfig = getGroupPreferencesRequestConfig(groupGuid = groupGuid)

        return request<Unit, GroupPreferences>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroupPreferences
     *
     * @param groupGuid A GUID for a Bitly group
     * @return RequestConfig
     */
    fun getGroupPreferencesRequestConfig(groupGuid: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/groups/{group_guid}/preferences".replace("{" + "group_guid" + "}", encodeURIComponent(groupGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Group Shorten Counts
     * Returns all the shorten counts for a group.
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return Metrics
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroupShortenCounts(groupGuid: kotlin.String, unit: TimeUnit = TimeUnit.day, units: kotlin.Int = -1, unitReference: kotlin.String? = null): Metrics {
        val localVarResponse = getGroupShortenCountsWithHttpInfo(groupGuid = groupGuid, unit = unit, units = units, unitReference = unitReference)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Metrics
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Group Shorten Counts
     * Returns all the shorten counts for a group.
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return ApiResponse<Metrics?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupShortenCountsWithHttpInfo(groupGuid: kotlin.String, unit: TimeUnit, units: kotlin.Int, unitReference: kotlin.String?): ApiResponse<Metrics?> {
        val localVariableConfig = getGroupShortenCountsRequestConfig(groupGuid = groupGuid, unit = unit, units = units, unitReference = unitReference)

        return request<Unit, Metrics>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroupShortenCounts
     *
     * @param groupGuid A GUID for a Bitly group
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return RequestConfig
     */
    fun getGroupShortenCountsRequestConfig(groupGuid: kotlin.String, unit: TimeUnit, units: kotlin.Int, unitReference: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("unit", listOf(unit.toString()))
                put("units", listOf(units.toString()))
                if (unitReference != null) {
                    put("unit_reference", listOf(unitReference.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/groups/{group_guid}/shorten_counts".replace("{" + "group_guid" + "}", encodeURIComponent(groupGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Tags by Group
     * Returns the tags currently used in the specified group. Maximum 1000.
     * @param groupGuid A GUID for a Bitly group
     * @return Tags
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroupTags(groupGuid: kotlin.String): Tags {
        val localVarResponse = getGroupTagsWithHttpInfo(groupGuid = groupGuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Tags
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Tags by Group
     * Returns the tags currently used in the specified group. Maximum 1000.
     * @param groupGuid A GUID for a Bitly group
     * @return ApiResponse<Tags?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupTagsWithHttpInfo(groupGuid: kotlin.String): ApiResponse<Tags?> {
        val localVariableConfig = getGroupTagsRequestConfig(groupGuid = groupGuid)

        return request<Unit, Tags>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroupTags
     *
     * @param groupGuid A GUID for a Bitly group
     * @return RequestConfig
     */
    fun getGroupTagsRequestConfig(groupGuid: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/groups/{group_guid}/tags".replace("{" + "group_guid" + "}", encodeURIComponent(groupGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Groups
     * Returns a list of groups in the organization.
     * @param organizationGuid A GUID for a Bitly organization (optional)
     * @return Groups
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroups(organizationGuid: kotlin.String? = null): Groups {
        val localVarResponse = getGroupsWithHttpInfo(organizationGuid = organizationGuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Groups
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Groups
     * Returns a list of groups in the organization.
     * @param organizationGuid A GUID for a Bitly organization (optional)
     * @return ApiResponse<Groups?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupsWithHttpInfo(organizationGuid: kotlin.String?): ApiResponse<Groups?> {
        val localVariableConfig = getGroupsRequestConfig(organizationGuid = organizationGuid)

        return request<Unit, Groups>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroups
     *
     * @param organizationGuid A GUID for a Bitly organization (optional)
     * @return RequestConfig
     */
    fun getGroupsRequestConfig(organizationGuid: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (organizationGuid != null) {
                    put("organization_guid", listOf(organizationGuid.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/groups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve QR Code Logo Images
     * Retrieves logo images associated with QR codes by group
     * @param groupGuid A GUID for a Bitly group
     * @return QRLogoImagesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getQRLogoImagesByGroup(groupGuid: kotlin.String): QRLogoImagesResponse {
        val localVarResponse = getQRLogoImagesByGroupWithHttpInfo(groupGuid = groupGuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QRLogoImagesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve QR Code Logo Images
     * Retrieves logo images associated with QR codes by group
     * @param groupGuid A GUID for a Bitly group
     * @return ApiResponse<QRLogoImagesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getQRLogoImagesByGroupWithHttpInfo(groupGuid: kotlin.String): ApiResponse<QRLogoImagesResponse?> {
        val localVariableConfig = getQRLogoImagesByGroupRequestConfig(groupGuid = groupGuid)

        return request<Unit, QRLogoImagesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getQRLogoImagesByGroup
     *
     * @param groupGuid A GUID for a Bitly group
     * @return RequestConfig
     */
    fun getQRLogoImagesByGroupRequestConfig(groupGuid: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/groups/{group_guid}/qr/images".replace("{" + "group_guid" + "}", encodeURIComponent(groupGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update a Group
     * Updates the details of a group.
     * @param groupGuid A GUID for a Bitly group
     * @param groupUpdate
     * @return Group
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateGroup(groupGuid: kotlin.String, groupUpdate: GroupUpdate): Group {
        val localVarResponse = updateGroupWithHttpInfo(groupGuid = groupGuid, groupUpdate = groupUpdate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Group
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update a Group
     * Updates the details of a group.
     * @param groupGuid A GUID for a Bitly group
     * @param groupUpdate
     * @return ApiResponse<Group?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateGroupWithHttpInfo(groupGuid: kotlin.String, groupUpdate: GroupUpdate): ApiResponse<Group?> {
        val localVariableConfig = updateGroupRequestConfig(groupGuid = groupGuid, groupUpdate = groupUpdate)

        return request<GroupUpdate, Group>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateGroup
     *
     * @param groupGuid A GUID for a Bitly group
     * @param groupUpdate
     * @return RequestConfig
     */
    fun updateGroupRequestConfig(groupGuid: kotlin.String, groupUpdate: GroupUpdate): RequestConfig<GroupUpdate> {
        val localVariableBody = groupUpdate
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/groups/{group_guid}".replace("{" + "group_guid" + "}", encodeURIComponent(groupGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update Group Preferences
     * Updates preferences for a group.
     * @param groupGuid A GUID for a Bitly group
     * @param groupPreferences
     * @return GroupPreferences
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateGroupPreferences(groupGuid: kotlin.String, groupPreferences: GroupPreferences): GroupPreferences {
        val localVarResponse = updateGroupPreferencesWithHttpInfo(groupGuid = groupGuid, groupPreferences = groupPreferences)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GroupPreferences
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Group Preferences
     * Updates preferences for a group.
     * @param groupGuid A GUID for a Bitly group
     * @param groupPreferences
     * @return ApiResponse<GroupPreferences?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateGroupPreferencesWithHttpInfo(groupGuid: kotlin.String, groupPreferences: GroupPreferences): ApiResponse<GroupPreferences?> {
        val localVariableConfig = updateGroupPreferencesRequestConfig(groupGuid = groupGuid, groupPreferences = groupPreferences)

        return request<GroupPreferences, GroupPreferences>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateGroupPreferences
     *
     * @param groupGuid A GUID for a Bitly group
     * @param groupPreferences
     * @return RequestConfig
     */
    fun updateGroupPreferencesRequestConfig(groupGuid: kotlin.String, groupPreferences: GroupPreferences): RequestConfig<GroupPreferences> {
        val localVariableBody = groupPreferences
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/groups/{group_guid}/preferences".replace("{" + "group_guid" + "}", encodeURIComponent(groupGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
