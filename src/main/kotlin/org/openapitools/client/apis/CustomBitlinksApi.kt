/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import okhttp3.HttpUrl
import okhttp3.OkHttpClient
import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.models.AddCustomBitlink
import org.openapitools.client.models.ClickMetrics
import org.openapitools.client.models.Clicks
import org.openapitools.client.models.CustomBitlink
import org.openapitools.client.models.TimeUnit
import org.openapitools.client.models.UpdateCustomBitlink
import java.io.IOException

class CustomBitlinksApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api-ssl.bitly.com/v4")
        }
    }

    /**
     * Add Custom Bitlink
     * Add a keyword (or \&quot;custom back-half\&quot;) to a Bitlink with a Custom Domain (domains must match). This endpoint can also be used for initial redirects to a link.
     * @param addCustomBitlink
     * @return CustomBitlink
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addCustomBitlink(addCustomBitlink: AddCustomBitlink): CustomBitlink {
        val localVarResponse = addCustomBitlinkWithHttpInfo(addCustomBitlink = addCustomBitlink)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CustomBitlink
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add Custom Bitlink
     * Add a keyword (or \&quot;custom back-half\&quot;) to a Bitlink with a Custom Domain (domains must match). This endpoint can also be used for initial redirects to a link.
     * @param addCustomBitlink
     * @return ApiResponse<CustomBitlink?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addCustomBitlinkWithHttpInfo(addCustomBitlink: AddCustomBitlink): ApiResponse<CustomBitlink?> {
        val localVariableConfig = addCustomBitlinkRequestConfig(addCustomBitlink = addCustomBitlink)

        return request<AddCustomBitlink, CustomBitlink>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addCustomBitlink
     *
     * @param addCustomBitlink
     * @return RequestConfig
     */
    fun addCustomBitlinkRequestConfig(addCustomBitlink: AddCustomBitlink): RequestConfig<AddCustomBitlink> {
        val localVariableBody = addCustomBitlink
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/custom_bitlinks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Clicks for a Custom Bitlink&#39;s Entire History
     * Returns the click counts for the specified link. This returns an array with clicks based on a date.
     * @param customBitlink A Custom Bitlink made of the domain and keyword
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return Clicks
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getClicksForCustomBitlink(customBitlink: kotlin.String, unit: TimeUnit = TimeUnit.day, units: kotlin.Int = -1, unitReference: kotlin.String? = null): Clicks {
        val localVarResponse = getClicksForCustomBitlinkWithHttpInfo(customBitlink = customBitlink, unit = unit, units = units, unitReference = unitReference)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Clicks
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Clicks for a Custom Bitlink&#39;s Entire History
     * Returns the click counts for the specified link. This returns an array with clicks based on a date.
     * @param customBitlink A Custom Bitlink made of the domain and keyword
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return ApiResponse<Clicks?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getClicksForCustomBitlinkWithHttpInfo(customBitlink: kotlin.String, unit: TimeUnit, units: kotlin.Int, unitReference: kotlin.String?): ApiResponse<Clicks?> {
        val localVariableConfig = getClicksForCustomBitlinkRequestConfig(customBitlink = customBitlink, unit = unit, units = units, unitReference = unitReference)

        return request<Unit, Clicks>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getClicksForCustomBitlink
     *
     * @param customBitlink A Custom Bitlink made of the domain and keyword
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return RequestConfig
     */
    fun getClicksForCustomBitlinkRequestConfig(customBitlink: kotlin.String, unit: TimeUnit, units: kotlin.Int, unitReference: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("unit", listOf(unit.toString()))
                put("units", listOf(units.toString()))
                if (unitReference != null) {
                    put("unit_reference", listOf(unitReference.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/custom_bitlinks/{custom_bitlink}/clicks".replace("{" + "custom_bitlink" + "}", encodeURIComponent(customBitlink.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Custom Bitlink
     * Returns the details and history of the specified link.
     * @param customBitlink A Custom Bitlink made of the domain and keyword
     * @return CustomBitlink
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCustomBitlink(customBitlink: kotlin.String): CustomBitlink {
        val localVarResponse = getCustomBitlinkWithHttpInfo(customBitlink = customBitlink)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CustomBitlink
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Custom Bitlink
     * Returns the details and history of the specified link.
     * @param customBitlink A Custom Bitlink made of the domain and keyword
     * @return ApiResponse<CustomBitlink?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCustomBitlinkWithHttpInfo(customBitlink: kotlin.String): ApiResponse<CustomBitlink?> {
        val localVariableConfig = getCustomBitlinkRequestConfig(customBitlink = customBitlink)

        return request<Unit, CustomBitlink>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCustomBitlink
     *
     * @param customBitlink A Custom Bitlink made of the domain and keyword
     * @return RequestConfig
     */
    fun getCustomBitlinkRequestConfig(customBitlink: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/custom_bitlinks/{custom_bitlink}".replace("{" + "custom_bitlink" + "}", encodeURIComponent(customBitlink.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Metrics for a Custom Bitlink by Destination
     * Returns click metrics for the specified link by its historical destinations.
     * @param customBitlink A Custom Bitlink made of the domain and keyword
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return ClickMetrics
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCustomBitlinkMetricsByDestination(customBitlink: kotlin.String, unit: TimeUnit = TimeUnit.day, units: kotlin.Int = -1, unitReference: kotlin.String? = null): ClickMetrics {
        val localVarResponse = getCustomBitlinkMetricsByDestinationWithHttpInfo(customBitlink = customBitlink, unit = unit, units = units, unitReference = unitReference)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ClickMetrics
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Metrics for a Custom Bitlink by Destination
     * Returns click metrics for the specified link by its historical destinations.
     * @param customBitlink A Custom Bitlink made of the domain and keyword
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return ApiResponse<ClickMetrics?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCustomBitlinkMetricsByDestinationWithHttpInfo(customBitlink: kotlin.String, unit: TimeUnit, units: kotlin.Int, unitReference: kotlin.String?): ApiResponse<ClickMetrics?> {
        val localVariableConfig = getCustomBitlinkMetricsByDestinationRequestConfig(customBitlink = customBitlink, unit = unit, units = units, unitReference = unitReference)

        return request<Unit, ClickMetrics>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCustomBitlinkMetricsByDestination
     *
     * @param customBitlink A Custom Bitlink made of the domain and keyword
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return RequestConfig
     */
    fun getCustomBitlinkMetricsByDestinationRequestConfig(customBitlink: kotlin.String, unit: TimeUnit, units: kotlin.Int, unitReference: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("unit", listOf(unit.toString()))
                put("units", listOf(units.toString()))
                if (unitReference != null) {
                    put("unit_reference", listOf(unitReference.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/custom_bitlinks/{custom_bitlink}/clicks_by_destination".replace("{" + "custom_bitlink" + "}", encodeURIComponent(customBitlink.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update Custom Bitlink
     * Move a keyword (or custom back-half) to a different Bitlink (domains must match).
     * @param customBitlink A Custom Bitlink made of the domain and keyword
     * @param updateCustomBitlink
     * @return CustomBitlink
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateCustomBitlink(customBitlink: kotlin.String, updateCustomBitlink: UpdateCustomBitlink): CustomBitlink {
        val localVarResponse = updateCustomBitlinkWithHttpInfo(customBitlink = customBitlink, updateCustomBitlink = updateCustomBitlink)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CustomBitlink
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Custom Bitlink
     * Move a keyword (or custom back-half) to a different Bitlink (domains must match).
     * @param customBitlink A Custom Bitlink made of the domain and keyword
     * @param updateCustomBitlink
     * @return ApiResponse<CustomBitlink?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateCustomBitlinkWithHttpInfo(customBitlink: kotlin.String, updateCustomBitlink: UpdateCustomBitlink): ApiResponse<CustomBitlink?> {
        val localVariableConfig = updateCustomBitlinkRequestConfig(customBitlink = customBitlink, updateCustomBitlink = updateCustomBitlink)

        return request<UpdateCustomBitlink, CustomBitlink>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateCustomBitlink
     *
     * @param customBitlink A Custom Bitlink made of the domain and keyword
     * @param updateCustomBitlink
     * @return RequestConfig
     */
    fun updateCustomBitlinkRequestConfig(customBitlink: kotlin.String, updateCustomBitlink: UpdateCustomBitlink): RequestConfig<UpdateCustomBitlink> {
        val localVariableBody = updateCustomBitlink
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/custom_bitlinks/{custom_bitlink}".replace("{" + "custom_bitlink" + "}", encodeURIComponent(customBitlink.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
