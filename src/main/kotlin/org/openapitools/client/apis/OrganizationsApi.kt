/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import okhttp3.HttpUrl
import okhttp3.OkHttpClient
import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.models.Metrics
import org.openapitools.client.models.Organization
import org.openapitools.client.models.Organizations
import org.openapitools.client.models.PlanLimits
import org.openapitools.client.models.TimeUnit
import java.io.IOException

class OrganizationsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api-ssl.bitly.com/v4")
        }
    }

    /**
     * Retrieve an Organization
     * Retrive details for the specified organization.
     * @param organizationGuid A GUID for a Bitly organization
     * @return Organization
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getOrganization(organizationGuid: kotlin.String): Organization {
        val localVarResponse = getOrganizationWithHttpInfo(organizationGuid = organizationGuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Organization
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an Organization
     * Retrive details for the specified organization.
     * @param organizationGuid A GUID for a Bitly organization
     * @return ApiResponse<Organization?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getOrganizationWithHttpInfo(organizationGuid: kotlin.String): ApiResponse<Organization?> {
        val localVariableConfig = getOrganizationRequestConfig(organizationGuid = organizationGuid)

        return request<Unit, Organization>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getOrganization
     *
     * @param organizationGuid A GUID for a Bitly organization
     * @return RequestConfig
     */
    fun getOrganizationRequestConfig(organizationGuid: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations/{organization_guid}".replace("{" + "organization_guid" + "}", encodeURIComponent(organizationGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Shorten Counts for an Organization
     * Returns the shorten counts for a specific organization over a specified time period.
     * @param organizationGuid A GUID for a Bitly organization
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return Metrics
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getOrganizationShortenCounts(organizationGuid: kotlin.String, unit: TimeUnit = TimeUnit.day, units: kotlin.Int = -1, unitReference: kotlin.String? = null): Metrics {
        val localVarResponse = getOrganizationShortenCountsWithHttpInfo(organizationGuid = organizationGuid, unit = unit, units = units, unitReference = unitReference)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Metrics
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Shorten Counts for an Organization
     * Returns the shorten counts for a specific organization over a specified time period.
     * @param organizationGuid A GUID for a Bitly organization
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return ApiResponse<Metrics?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getOrganizationShortenCountsWithHttpInfo(organizationGuid: kotlin.String, unit: TimeUnit, units: kotlin.Int, unitReference: kotlin.String?): ApiResponse<Metrics?> {
        val localVariableConfig = getOrganizationShortenCountsRequestConfig(organizationGuid = organizationGuid, unit = unit, units = units, unitReference = unitReference)

        return request<Unit, Metrics>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getOrganizationShortenCounts
     *
     * @param organizationGuid A GUID for a Bitly organization
     * @param unit A unit of time (default to day)
     * @param units An integer representing the time units to query data for. pass -1 to return all units of time. (default to -1)
     * @param unitReference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. Timestamp values should be url encoded (i.e. replace &#39;+&#39; with &#39;%2B&#39; and &#39;:&#39; with &#39;%3A&#39;; 2022-02-02T15:53:02+0000 becomes 2022-02-02T15%3A53%3A02%2B0000) (optional)
     * @return RequestConfig
     */
    fun getOrganizationShortenCountsRequestConfig(organizationGuid: kotlin.String, unit: TimeUnit, units: kotlin.Int, unitReference: kotlin.String?): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("unit", listOf(unit.toString()))
                put("units", listOf(units.toString()))
                if (unitReference != null) {
                    put("unit_reference", listOf(unitReference.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations/{organization_guid}/shorten_counts".replace("{" + "organization_guid" + "}", encodeURIComponent(organizationGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Organizations
     * Retrieve a list of organizations.
     * @return Organizations
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getOrganizations(): Organizations {
        val localVarResponse = getOrganizationsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Organizations
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Organizations
     * Retrieve a list of organizations.
     * @return ApiResponse<Organizations?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getOrganizationsWithHttpInfo(): ApiResponse<Organizations?> {
        val localVariableConfig = getOrganizationsRequestConfig()

        return request<Unit, Organizations>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getOrganizations
     *
     * @return RequestConfig
     */
    fun getOrganizationsRequestConfig(): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Plan Limits
     * Returns all plan limits and counts available for an organization.
     * @param organizationGuid A GUID for a Bitly organization
     * @return PlanLimits
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPlanLimits(organizationGuid: kotlin.String): PlanLimits {
        val localVarResponse = getPlanLimitsWithHttpInfo(organizationGuid = organizationGuid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PlanLimits
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Plan Limits
     * Returns all plan limits and counts available for an organization.
     * @param organizationGuid A GUID for a Bitly organization
     * @return ApiResponse<PlanLimits?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPlanLimitsWithHttpInfo(organizationGuid: kotlin.String): ApiResponse<PlanLimits?> {
        val localVariableConfig = getPlanLimitsRequestConfig(organizationGuid = organizationGuid)

        return request<Unit, PlanLimits>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPlanLimits
     *
     * @param organizationGuid A GUID for a Bitly organization
     * @return RequestConfig
     */
    fun getPlanLimitsRequestConfig(organizationGuid: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations/{organization_guid}/plan_limits".replace("{" + "organization_guid" + "}", encodeURIComponent(organizationGuid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
